"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var nativescript_socketio_1 = require("nativescript-socketio");
var nativescript_webrtc_plugin_1 = require("nativescript-webrtc-plugin");
var operators_1 = require("rxjs/operators");
var CallService = /** @class */ (function () {
    function CallService(socket) {
        var _this = this;
        this.socket = socket;
        this.microphoneState = false;
        this.videostat = false;
        this.socket.on('call:iceCandidate', function (data) {
            var sdpMid = data.sdpMid;
            var sdpMLineIndex = data.sdpMLineIndex;
            var sdp = data.sdp;
            if (_this.webrtc) {
                _this.webrtc.addIceCandidate({
                    sdp: sdp,
                    sdpMid: sdpMid,
                    sdpMLineIndex: sdpMLineIndex
                });
            }
        });
        this.socket.on('call:answered', function (data) {
            _this.webrtc.handleAnswerReceived({ sdp: data.sdp, type: data.type });
        });
        this.socket.on('call:answer', function (data) {
            _this.answerCall({
                sdp: data.sdp,
                type: data.type
            }, { enableVideo: true, enableAudio: true });
        });
    }
    CallService.prototype.getUsers = function () {
        this.socket.emit('getUsers', {});
    };
    CallService.prototype.answerCall = function (sdp, options) {
        var _this = this;
        this.webrtc = new nativescript_webrtc_plugin_1.WebRTC(options);
        this.webrtc.on('webRTCClientDidReceiveRemoteVideoTrackStream', function (args) {
            var object = args.object;
            var remoteVideoTrack = object.get('remoteVideoTrack');
            console.log(remoteVideoTrack);
            _this.videoTrack = object.get('remoteVideoTrack');
            _this.remoteStream = object.get('stream');
            var video = _this.remoteVideoView;
            if (video) {
                video.videoTrack = remoteVideoTrack;
            }
        });
        this.webrtc.on('webRTCClientStartCallWithSdp', function (args) {
            var sdp = args.object.get('sdp');
            var type = args.object.get('type');
            if (type === nativescript_webrtc_plugin_1.WebRTCSdpType.ANSWER) {
                _this.socket.emit('answered', {
                    from: _this.currentUser,
                    to: _this.other,
                    sdp: sdp,
                    type: type
                });
            }
        });
        this.webrtc.on('webRTCClientDidGenerateIceCandidate', function (args) {
            var iceCandidate = args.object.get('iceCandidate');
            _this.socket.emit('iceCandidate', Object.assign({ to: _this.other, from: _this.currentUser }, iceCandidate));
        });
        this.initCamera().then(function (stream) {
            _this.localStream = stream;
            _this.setUpLocalView(true);
            _this.webrtc.connect();
            _this.webrtc.addLocalStream(_this.localStream);
            _this.webrtc.createAnswerForOfferReceived({
                type: sdp.type,
                sdp: sdp.sdp
            });
        });
    };
    CallService.prototype.answer = function (from, to, sdp, type) {
        this.other = from;
        this.answerCall({
            sdp: sdp,
            type: type
        }, { enableVideo: true, enableAudio: true });
    };
    CallService.prototype.call = function (username, options) {
        var _this = this;
        this.other = username;
        this.webrtc = new nativescript_webrtc_plugin_1.WebRTC(options);
        this.webrtc.on('webRTCClientDidReceiveRemoteVideoTrackStream', function (args) {
            var object = args.object;
            var remoteVideoTrack = object.get('remoteVideoTrack');
            var video = _this.remoteVideoView;
            console.log(typeof remoteVideoTrack);
            _this.remoteStream = object.get('stream');
            if (video) {
                video.videoTrack = remoteVideoTrack;
            }
        });
        this.webrtc.on('webRTCClientStartCallWithSdp', function (args) {
            var sdp = args.object.get('sdp');
            var type = args.object.get('type');
            if (type === nativescript_webrtc_plugin_1.WebRTCSdpType.ANSWER) {
                _this.webrtc.handleAnswerReceived({
                    sdp: sdp,
                    type: type
                });
            }
            else {
                _this.socket.emit('call', {
                    from: _this.currentUser,
                    to: username,
                    sdp: sdp,
                    type: type
                });
            }
        });
        this.webrtc.on('webRTCClientDidGenerateIceCandidate', function (args) {
            var iceCandidate = args.object.get('iceCandidate');
            _this.socket.emit('iceCandidate', Object.assign({
                to: username,
                from: _this.currentUser
            }, iceCandidate));
        });
        this.initCamera().then(function (stream) {
            _this.localStream = stream;
            _this.setUpLocalView(true);
            _this.webrtc.connect();
            _this.webrtc.addLocalStream(_this.localStream);
            _this.webrtc.makeOffer();
        });
    };
    CallService.prototype.initCamera = function () {
        var _this = this;
        if (nativescript_webrtc_plugin_1.WebRTC.hasPermissions()) {
            return this.webrtc.getUserMedia(1);
        }
        else {
            return rxjs_1.from(nativescript_webrtc_plugin_1.WebRTC.requestPermissions())
                .pipe(operators_1.switchMap(function () {
                if (nativescript_webrtc_plugin_1.WebRTC.hasPermissions()) {
                    return rxjs_1.from(_this.webrtc.getUserMedia(1));
                }
                return rxjs_1.throwError('Has no permission');
            }))
                .toPromise();
        }
    };
    CallService.prototype.setUpLocalView = function (mirror) {
        var localVideo = this.localVideoView;
        localVideo.mirror = true;
        localVideo.stream = this.localStream;
    };
    // Personals functions.
    CallService.prototype.changeMicrophoneState = function () {
        this.microphoneState = !this.microphoneState;
        return this.webrtc.micEnabled(!this.microphoneState);
    };
    CallService.prototype.stopVideo = function () {
        var videoTrack = this.localStream.videoTracks.get(0);
        var trackId = videoTrack.id();
        this.videostat = !this.videostat;
        videoTrack.setEnabled(this.videostat);
    };
    CallService.prototype.stopCall = function () {
        this.webrtc.disconnect();
    };
    CallService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [nativescript_socketio_1.SocketIO])
    ], CallService);
    return CallService;
}());
exports.CallService = CallService;
//# sourceMappingURL=data:application/json;base64,